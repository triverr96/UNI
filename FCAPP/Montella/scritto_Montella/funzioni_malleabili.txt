Ecco una **guida pratica** per rendere un codice MPI malleabile in stile ADM/EMPI, con un focus sulle funzioni MPI che vanno sostituite o adattate e una panoramica generale delle best practice.

---

# **Guida alla Malleabilità di un Codice MPI**

## **1. Concetto di malleabilità**

Un codice malleabile è in grado di **adattare dinamicamente il numero di processi MPI** durante l’esecuzione, senza essere riavviato. Questo si ottiene tramite l’uso di una libreria come ADM/EMPI, che fornisce un "communicator" speciale e funzioni di controllo.

---

## **2. Funzioni MPI da sostituire**

### **a. Communicator**
**Da sostituire:**
- `MPI_COMM_WORLD` → `ADM_COMM_WORLD`

**Perché:**  
ADM/EMPI gestisce la dinamicità dei processi tramite il proprio communicator.  
**Tutte** le funzioni MPI che richiedono un communicator devono usare `ADM_COMM_WORLD`.

**Esempi:**
```c
MPI_Comm_rank(ADM_COMM_WORLD, &world_rank);
MPI_Comm_size(ADM_COMM_WORLD, &world_size);
MPI_Barrier(ADM_COMM_WORLD);
MPI_Bcast(..., ADM_COMM_WORLD);
MPI_Scatterv(..., ADM_COMM_WORLD);
MPI_Gatherv(..., ADM_COMM_WORLD);
```

---

### **b. Funzioni di comunicazione collettiva**
**Da sostituire:**
- Tutte le funzioni come `MPI_Bcast`, `MPI_Scatter`, `MPI_Scatterv`, `MPI_Gather`, `MPI_Gatherv`, `MPI_Allgather`, `MPI_Allreduce`, ecc.  
**Devono** usare `ADM_COMM_WORLD` come communicator.

---

### **c. Funzioni di sincronizzazione**
**Da sostituire:**
- `MPI_Barrier(MPI_COMM_WORLD)` → `MPI_Barrier(ADM_COMM_WORLD)`

---

### **d. Funzioni di gestione del rank e della size**
**Da sostituire:**
- `MPI_Comm_rank(MPI_COMM_WORLD, &world_rank)` → `MPI_Comm_rank(ADM_COMM_WORLD, &world_rank)`
- `MPI_Comm_size(MPI_COMM_WORLD, &world_size)` → `MPI_Comm_size(ADM_COMM_WORLD, &world_size)`

**Nota:**  
Queste vanno **richiamate dopo ogni variazione** del numero di processi (dopo la regione malleabile).

---

## **3. Funzioni ADM/EMPI da aggiungere**

- **Includi la libreria:**  
  `#include <empi.h>`

- **Regione malleabile:**  
  ```c
  ADM_MalleableRegion(ADM_SERVICE_START);
  // ... codice malleabile ...
  int status = ADM_MalleableRegion(ADM_SERVICE_STOP);
  if (status != ADM_ACTIVE) break; // Se il processo è stato rimosso, esce dal ciclo
  ```

- **Monitoraggio:**  
  ```c
  ADM_MonitoringService(ADM_SERVICE_START);
  // ... main loop ...
  ADM_MonitoringService(ADM_SERVICE_STOP);
  ```

- **Gestione delle iterazioni:**  
  ```c
  ADM_RegisterSysAttributesInt("ADM_GLOBAL_MAX_ITERATION", &itmax);
  ADM_GetSysAttributesInt("ADM_GLOBAL_ITERATION", &it);
  ADM_RegisterSysAttributesInt("ADM_GLOBAL_ITERATION", &it);
  ```

---

## **4. Funzioni MPI che NON vanno cambiate**

- **MPI_Init / MPI_Finalize:**  
  Restano invariati.
- **Definizione di tipi derivati (MPI_Type_create_struct, MPI_Type_commit, MPI_Type_free):**  
  Restano invariati.
- **Funzioni di memoria (malloc, free, memcpy, ecc.):**  
  Restano invariati.
- **Funzioni di utility (MPI_Get_processor_name, ecc.):**  
  Restano invariati.

---

## **5. Altre funzioni MPI utili (ma non sempre usate)**

- **MPI_Send / MPI_Recv / MPI_Isend / MPI_Irecv:**  
  Se usate, vanno anch’esse adattate a `ADM_COMM_WORLD`.
- **MPI_Reduce / MPI_Allreduce / MPI_Scan / MPI_Exscan:**  
  Idem, sempre con `ADM_COMM_WORLD`.
- **MPI_Comm_split / MPI_Comm_dup:**  
  Se crei communicator personalizzati, puoi duplicare o splittare `ADM_COMM_WORLD`.

---

## **6. Best practice e attenzione**

- **Aggiorna sempre world_rank e world_size** dopo ogni regione malleabile.
- **Ridistribuisci i dati** (es. particelle, righe di matrice, ecc.) ogni volta che cambia il numero di processi.
- **Gestisci la memoria**: libera e rialloca buffer se cambia la suddivisione dei dati.
- **Controlla lo stato di ADM_MalleableRegion**: se il processo è stato rimosso, esci dal ciclo principale.
- **Non mischiare communicator**: usa sempre e solo `ADM_COMM_WORLD` per la parte malleabile.

---

## **7. Esempio di sostituzione**

**Prima:**
```c
MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
MPI_Barrier(MPI_COMM_WORLD);
MPI_Scatterv(sendbuf, send_counts, displs, mpiParticleData,
             recvbuf, particlesToProcess, mpiParticleData, 0, MPI_COMM_WORLD);
```

**Dopo:**
```c
MPI_Comm_rank(ADM_COMM_WORLD, &world_rank);
MPI_Barrier(ADM_COMM_WORLD);
MPI_Scatterv(sendbuf, send_counts, displs, mpiParticleData,
             recvbuf, particlesToProcess, mpiParticleData, 0, ADM_COMM_WORLD);
```

---

## **8. Schema generale di un ciclo malleabile**

```c
// Inizializzazione ADM/EMPI
MPI_Init(&argc, &argv);
MPI_Comm_rank(ADM_COMM_WORLD, &world_rank);
MPI_Comm_size(ADM_COMM_WORLD, &world_size);

ADM_MonitoringService(ADM_SERVICE_START);

while (it < itmax) {
    ADM_MalleableRegion(ADM_SERVICE_START);

    // Aggiorna world_rank e world_size se necessario
    MPI_Comm_rank(ADM_COMM_WORLD, &world_rank);
    MPI_Comm_size(ADM_COMM_WORLD, &world_size);

    // ... logica di calcolo e ridistribuzione dati ...

    ADM_RegisterSysAttributesInt("ADM_GLOBAL_ITERATION", &it);

    int status = ADM_MalleableRegion(ADM_SERVICE_STOP);
    if (status != ADM_ACTIVE) break;

    it++;
}

ADM_MonitoringService(ADM_SERVICE_STOP);
MPI_Finalize();
```

---

## **9. Riferimenti utili**

- [Documentazione EMPI/ADM](https://github.com/ADM-Lab/EMPI)  
- [Esempi di codice malleabile](https://github.com/ADM-Lab/EMPI/tree/master/examples)

---

**In sintesi:**  
Per rendere un codice MPI malleabile, **sostituisci tutti i communicator con ADM_COMM_WORLD**, aggiungi le chiamate ADM/EMPI per la gestione della malleabilità e aggiorna la logica di ridistribuzione dati e rank/size.  
Le funzioni MPI di base restano le stesse, ma vanno sempre riferite al communicator ADM.


// get process type per jacobi
    int proctype;
    ADM_GetSysAttributesInt ("ADM_GLOBAL_PROCESS_TYPE", &proctype);

    // if process is native
    if (proctype == ADM_NATIVE) {
        printf ("Rank(%d/%d): Process native\n", world_rank, world_size);
    // if process is spawned
    } else {
        //Bcast result vector
        MPI_Bcast (vectorX_global, dim, MPI_DOUBLE, 0, ADM_COMM_WORLD);

        printf ("Rank(%d/%d): Process spawned\n", world_rank, world_size);
    }

    /* set max number of iterations */
    ADM_RegisterSysAttributesInt ("ADM_GLOBAL_MAX_ITERATION", &itmax);

    /* get actual iteration for new added processes*/
    ADM_GetSysAttributesInt ("ADM_GLOBAL_ITERATION", &it);

    /* starting monitoring service */
    ADM_MonitoringService (ADM_SERVICE_START);

    // init last world zize
    int last_world_size = world_size;


// get process type per wacomm
    int proctype;
    ADM_GetSysAttributesInt ("ADM_GLOBAL_PROCESS_TYPE", &proctype);

    // if process is native
    if (proctype == ADM_NATIVE) {
        printf ("Rank(%d/%d): Process native\n", world_rank, world_size);
    // if process is spawned
    } else {
        printf ("Rank(%d/%d): Process spawned\n", world_rank, world_size);
    }

    /* set max number of iterations */
    ADM_RegisterSysAttributesInt ("ADM_GLOBAL_MAX_ITERATION", &itmax);

    /* get actual iteration for new added processes*/
    ADM_GetSysAttributesInt ("ADM_GLOBAL_ITERATION", &it);

    /* starting monitoring service */
    ADM_MonitoringService (ADM_SERVICE_START);